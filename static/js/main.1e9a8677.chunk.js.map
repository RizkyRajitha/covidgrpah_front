{"version":3,"sources":["pages/landingpage/landingpage.js","App.js","registerServiceWorker.js","index.js"],"names":["axios","require","default","Landingpage","_useState","useState","_useState2","Object","slicedToArray","data","setdata","_useState3","_useState4","updatetime","setupdatetime","_useState5","_useState6","isLoading","setisLoading","useEffect","get","then","result","console","log","time","Date","updateTime","toLocaleString","catch","err","react_default","a","createElement","className","class","href","hidden","role","es6","width","height","margin","top","right","left","bottom","stroke","strokeDasharray","dataKey","type","domain","name","App","BrowserRouter","Switch","Route","exact","path","component","Component","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister","ReactDOM","render","src_App","document","getElementById"],"mappings":"mSAiBMA,EAAQC,EAAQ,KAASC,QAwGhBC,EAtGK,WAAM,IAAAC,EACAC,mBAAS,IADTC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACjBK,EADiBH,EAAA,GACXI,EADWJ,EAAA,GAAAK,EAEYN,mBAAS,IAFrBO,EAAAL,OAAAC,EAAA,EAAAD,CAAAI,EAAA,GAEjBE,EAFiBD,EAAA,GAELE,EAFKF,EAAA,GAAAG,EAGUV,oBAAS,GAHnBW,EAAAT,OAAAC,EAAA,EAAAD,CAAAQ,EAAA,GAGjBE,EAHiBD,EAAA,GAGNE,EAHMF,EAAA,GAwBxB,OAnBAG,oBAAU,WACRD,GAAa,GACblB,EACGoB,IAXL,6EAYKC,KAAK,SAAAC,GACJC,QAAQC,IAAIF,EAAOb,MACnBC,EAAQY,EAAOb,KAAKA,MACpBS,GAAa,GAEb,IAAIO,EAAO,IAAIC,KAAKJ,EAAOb,KAAKkB,YAEhCb,EAAcW,EAAKG,oBAEpBC,MAAM,SAAAC,GACLZ,GAAa,GACbK,QAAQC,IAAIM,MAEf,IAGDC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,IACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,oDACTJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,mBACTJ,EAAAC,EAAAC,cAAA,QAAME,MAAM,uBAAuBC,KAAK,KAAxC,2DAKJL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZ,IACDH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OACEI,QAASpB,EACTiB,UAAU,sCACVI,KAAK,UAELP,EAAAC,EAAAC,cAAA,QAAMC,UAAU,WAAhB,iBAINH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yBACZzB,EAAK,IACJsB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAqBC,MAAM,MAAMC,OAAO,OACtCV,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEL,UAAU,WACVzB,KAAMA,EACNiC,OAAQ,CAAEC,IAAK,EAAGC,MAAO,EAAGC,KAAM,EAAGC,OAAQ,IAE7Cf,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAeQ,OAAO,OAAOC,gBAAgB,QAC7CjB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOU,QAAQ,qBAEflB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CAAOW,KAAK,SAASC,OAAQ,CAAC,EAAG,kBAEjCpB,EAAAC,EAAAC,cAACM,EAAA,EAAD,MACAR,EAAAC,EAAAC,cAACM,EAAA,EAAD,MACAR,EAAAC,EAAAC,cAACM,EAAA,EAAD,MACAR,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEW,KAAK,WACLD,QAAQ,oBACRG,KAAK,cACLL,OAAO,YAIThB,EAAAC,EAAAC,cAACM,EAAA,EAAD,CACEW,KAAK,WACLD,QAAQ,kBACRF,OAAO,UACPK,KAAK,iBAQfrB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAf,iBAA0CzB,EAAK,IAAMI,IAEvDkB,EAAAC,EAAAC,cAAA,UAAQE,MAAM,gCACZJ,EAAAC,EAAAC,cAAA,OAAKE,MAAM,SACTJ,EAAAC,EAAAC,cAAA,KAAGG,KAAK,+BAA+BF,UAAU,WAAjD,+CAGAH,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,KACEG,KAAK,6CACLF,UAAU,WAEVH,EAAAC,EAAAC,cAAA,KAAGE,MAAM,6BC9FNkB,gOAVX,OACEtB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACEvB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,KACExB,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWxD,aAPzByD,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAqGA,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC,eC7GnBC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.1e9a8677.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n// import Navbar from \"../../components/navbar\";\r\n// import Footer from \"../../components/footer/footer\";\r\nimport \"./landingpage.scoped.css\";\r\nimport {\r\n  LineChart,\r\n  Line,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer\r\n} from \"recharts\";\r\n// const data = [{ name: \"Page A\", uv: 400, pv: 2400, amt: 2400 }];\r\nconst API =\r\n  \"https://lvv3icabfe.execute-api.us-east-1.amazonaws.com/default/helloworld\";\r\nconst axios = require(\"axios\").default;\r\n\r\nconst Landingpage = () => {\r\n  const [data, setdata] = useState([]);\r\n  const [updatetime, setupdatetime] = useState(\"\");\r\n  const [isLoading, setisLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setisLoading(true);\r\n    axios\r\n      .get(API)\r\n      .then(result => {\r\n        console.log(result.data);\r\n        setdata(result.data.data);\r\n        setisLoading(false);\r\n\r\n        var time = new Date(result.data.updateTime);\r\n\r\n        setupdatetime(time.toLocaleString());\r\n      })\r\n      .catch(err => {\r\n        setisLoading(false);\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"\">\r\n      <nav class=\"navbar navbar-expand-md navbar-dark bg-primary  \">\r\n        <div class=\"mx-auto order-0\">\r\n          <span class=\"navbar-brand mx-auto\" href=\"#\">\r\n            Graphical Representatoin of covid-19 report Sri lanka\r\n          </span>\r\n        </div>\r\n      </nav>\r\n      <div className=\"container graphOuter\">\r\n        <div className=\"felxdiv\">\r\n          {\" \"}\r\n          <div className=\"spinnerdashboard\">\r\n            <div\r\n              hidden={!isLoading}\r\n              className=\"spinner-border text-primary loading\"\r\n              role=\"status\"\r\n            >\r\n              <span className=\"sr-only\">Loading...</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"container  graphInner\">\r\n          {data[0] && (\r\n            <ResponsiveContainer width=\"80%\" height=\"80%\">\r\n              <LineChart\r\n                className=\"chartsvg\"\r\n                data={data}\r\n                margin={{ top: 5, right: 0, left: 0, bottom: 5 }}\r\n              >\r\n                <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\r\n                <XAxis dataKey=\"update_date_time\" />\r\n\r\n                <YAxis type=\"number\" domain={[0, \"dataMax + 20\"]} />\r\n\r\n                <Tooltip />\r\n                <Tooltip />\r\n                <Legend />\r\n                <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"local_total_cases\"\r\n                  name=\"Total Cases\"\r\n                  stroke=\"#0F52BA\"\r\n                  // activeDot={{ r: 8 }}\r\n                />\r\n\r\n                <Line\r\n                  type=\"monotone\"\r\n                  dataKey=\"local_new_cases\"\r\n                  stroke=\"#EC1A28\"\r\n                  name=\"New Cases\"\r\n                  // activeDot={{ r: 8 }}\r\n                />\r\n              </LineChart>\r\n            </ResponsiveContainer>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"updatediv\">Last update : {data[0] && updatetime}</div>\r\n      </div>\r\n      <footer class=\"mastfoot mt-auto bg-primary \">\r\n        <div class=\"inner\">\r\n          <a href=\"https://hpb.health.gov.lk/en\" className=\"linkref\">\r\n            Reference HEALTH PROMOTION BUREAU Sri Lanka\r\n          </a>\r\n          <br />\r\n          <a\r\n            href=\"https://github.com/RizkyRajitha/covidgraph\"\r\n            className=\"linkref\"\r\n          >\r\n            <i class=\"fab fa-github fa-2x\"></i>\r\n          </a>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landingpage;\r\n","import React, { Component } from \"react\";\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Landingpage from \"./pages/landingpage/landingpage\";\r\n\r\nclass App extends Component {\r\n  componentDidMount() {}\r\n\r\n  render() {\r\n    return (\r\n      <Router>\r\n        <Switch>\r\n          <Route exact path=\"*\" component={Landingpage} />\r\n        </Switch>\r\n      </Router>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://goo.gl/SC7cgQ\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n\r\n  if (swUrl.match(\"^.*(\\/share\\/).*\")) {\r\n    console.log(\"goes to backend\")\r\n    return false;\r\n  } else {\r\n    fetch(swUrl)\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        if (\r\n          response.status === 404 ||\r\n          response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          \"No internet connection found. App is running in offline mode.\"\r\n        );\r\n      });\r\n  }\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport App from \"./App\";\r\nimport { registerServiceWorker, unregister } from \"./registerServiceWorker\";\r\n\r\n// registerServiceWorker\r\nunregister();\r\n// registerServiceWorker();\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}